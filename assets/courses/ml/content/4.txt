 Title:Machine Learning - Data Distribution
 Bold:Data Distribution
 Text:Earlier in this tutorial we have worked with very small amounts of data in our examples, just to understand the different concepts.
 Text:In the real world, the data sets are much bigger, but it can be difficult to gather real world data, at least at an early stage of a project.
 Bold:How Can we Get Big Data Sets?
 Text:To create big data sets for testing, we use the Python module NumPy, which comes with a number of methods to create random data sets, of any size.
 Text:Create an array containing 250 random floats between 0 and 5:
 Code:import numpy
 Code:x = numpy.random.uniform(0.0, 5.0, 250)
 Code:print(x)
 Bold:Histogram
 Text:To visualize the data set we can draw a histogram with the data we collected.
 Text:We will use the Python module Matplotlib to draw a histogram.
 Text:Draw a histogram:
 Code:import numpy
 Code:import matplotlib.pyplot as plt
 Code:x = numpy.random.uniform(0.0, 5.0, 250)
 Code:plt.hist(x, 5)
 Code:plt.show()
 Bold:Result:
 Image:https://www.w3schools.com/python/img_numpy_uniform3.png 
 Bold:Histogram Explained
 Text:We use the array from the example above to draw a histogram with 5 bars.
 Text:The first bar represents how many values in the array are between 0 and 1.
 Text:The second bar represents how many values are between 1 and 2. Etc.
 Text:Which gives us this result:
 Text:52 values are between 0 and 1
 Text:48 values are between 1 and 2
 Text:49 values are between 2 and 3
 Text:51 values are between 3 and 4
 Text:50 values are between 4 and 5
 Text:Note: The array values are random numbers and will not show the exact same result on your computer.
 Text:Big Data Distributions
 Text:An array containing 250 values is not considered very big, but now you know how to create a random set of values, and by changing the parameters, you can create the data set as big as you want.Create an array with 100000 random numbers, and display them using a histogram with 100 bars:
 Code:import numpy
 Code:import matplotlib.pyplot as plt
 Code:x = numpy.random.uniform(0.0, 5.0, 100000)
 Code:plt.hist(x, 100)
 Code:plt.show()